@page "/clientes"
@inject IRepositorioOC repositorio
@inject ISnackbar snackBar
@inject NavigationManager navigatorManager

<MudCard Elevation="25">

    <MudCardHeader>

        <CardHeaderContent>
            <MudText Typo="Typo.h6"> Agregar / Buscar Clientes </MudText>
        </CardHeaderContent>

    </MudCardHeader>

    <MudCardContent>

        <div class="d-flex">

            <MudTextField @bind-Value="cliente.Nombre" Label="Nombre" Variant="Variant.Text" Margin="Margin.Normal" Class="me-5"></MudTextField>
            <MudTextField @bind-Value="cliente.Cedula" Label="Cedula" Variant="Variant.Text" Margin="Margin.Normal" Class="me-5"></MudTextField>


        </div>
        <div class="d-flex">

            <MudTextField @bind-Value="cliente.Telefono" Label="Telefono" Variant="Variant.Text" Margin="Margin.Normal" Class="me-5"></MudTextField>
            <MudTextField @bind-Value="cliente.Direccion" Label="Direccion" Variant="Variant.Text" Margin="Margin.Normal" Class="me-5"></MudTextField>


        </div>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="GuardarCliente">Guardar Clientes</MudButton>

    </MudCardContent>

</MudCard>
<br />

<MudTable Elevation="25" Items="clientes" Dense="true" Hover="true" Filter="new Func<Cliente, bool>(Buscar)" @bind-autor="cliente">
    <ToolBarContent>
        <MudText>Libro</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Cliente, object>(x=>x.Nombre)">Nombre del Cliente</MudTableSortLabel></MudTh>
        <MudTd>Cedula</MudTd>
        <MudTd>Telefono</MudTd>
        <MudTd>Direccion</MudTd>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Cedula">@context.Cedula</MudTd>
        <MudTd DataLabel="Telefono">@context.Telefono</MudTd>
        <MudTd DataLabel="Direccion">@context.Direccion</MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>



@code {

    private bool hover = false;
    private string searchString = "";

    private List<Cliente> clientes= new List<Cliente>();
    private Cliente cliente = new Cliente();

    protected override async Task OnInitializedAsync()
    {

        await GetCliente();


    }

    public void IrA(int id)
    {

        navigatorManager.NavigateTo($"/OC/{id}");

    }

    private bool Buscar(Cliente client)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (client.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    public async Task<List<Cliente>> GetCliente()
    {

        var httpResponse = await repositorio.Get<List<Cliente>>("/api/cliente");

        if (!(httpResponse.Error))
        {
            clientes = httpResponse.Response;

            return clientes;
        }

        return clientes;

    }


    public async Task GuardarCliente()
    {

        var respuesta = await repositorio.Post<Cliente>("api/cliente", cliente);

        if (respuesta.Error)
        {
            snackBar.Add(await respuesta.GetBody(), Severity.Error);
        }
        else
        {
            snackBar.Add("Cliente agregado correctamente", Severity.Success);
            cliente = new Cliente();
            await GetCliente();
        }

    }

}