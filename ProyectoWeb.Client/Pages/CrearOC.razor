@page "/crearOC"
@inject IRepositorioOC repositorio
@inject ISnackbar snackBar
@inject NavigationManager navigatorManager


<MudContainer MaxWidth="MaxWidth.Large">
   
    <MudGrid Spacing="12" Class="mt-5">
        <MudItem xs="6">
            <MudText Typo="Typo.h5" GutterBottom="true">Billing address</MudText>
            <MudGrid>
               
                <MudItem xs="6">
                    <MudSelect @bind-Value="occ.ClienteId" Label="Seleccione un Cliente" Variant="Variant.Text">

                        @if (clientes != null)
                        {

                            foreach (var item in clientes)
                            {
                                <MudSelectItem Value="@item.Id"> @item.Nombre </MudSelectItem>

                            }

                        }

                    </MudSelect>
                </MudItem>

                <MudItem xs="6">
                    <MudSelect @bind-Value="occ.UsuarioId" Label="Seleccione un Usuario" Variant="Variant.Text">

                        @if (usuarios != null)
                        {

                            foreach (var item in usuarios)
                            {
                                <MudSelectItem Value="@item.Id"> @item.Username </MudSelectItem>

                            }

                        }

                    </MudSelect>
                </MudItem>
               
                <MudItem xs="6">
                    <MudDatePicker Class="mt-5" @bind-Date="oFecha" Label="Fecha" />
                </MudItem>
               
           
                    <MudItem xs="6">
                    <MudDatePicker Class="mt-5" @bind-Date="oFechaEntrega" Label="Fecha de Entrega" />
                    </MudItem>
             

                <MudItem xs="12" Class="mt-4">
                  <MudTextField @bind-Value="occ.Estado" Disabled="true" ></MudTextField>
                </MudItem>

                <MudItem xs="2" Class="mt-5">
                    <MudTextField @bind-Value="ocd.Cantidad" Label="Cantidad"></MudTextField>
                </MudItem>


                <MudItem xs="3" Class="mt-5">
                    <MudTextField @bind-Value="ocd.Precio" Label="Precio"></MudTextField>
                </MudItem>

                <MudItem xs="5" Class="mt-5">
                    <MudSelect @bind-Value="ocd.LibroId" Label="Seleccione un Libro" Variant="Variant.Text">

                        @if (clientes != null)
                        {

                            foreach (var item in oLibros)
                            {
                                <MudSelectItem Value="@item.Id"> @item.Titulo </MudSelectItem>

                            }

                        }

                    </MudSelect>
                </MudItem>

                <MudItem xs="2">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AgregarLibro" Class="mt-8" />
                   
                </MudItem>
         
            </MudGrid>
        </MudItem>
        <MudItem xs="6">
            <MudText Typo="Typo.h5" GutterBottom="true">Carrito</MudText>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
              
                @if (occ.Detalle.Count() > 0 )
                {


                    <MudTable Items="occ.Detalle" Dense="true">

                        <ColGroup>

                            <col style="width: 60px;" />
                            <col />
                            <col style="width: 60%;" />
                            <col style ="width: 60px;" />

                        </ColGroup>

                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh>Cantidad</MudTh>
                            <MudTh>Titulo</MudTh>
                            <MudTh>SubTotal</MudTh>
                        </HeaderContent>
                           

                        <RowTemplate>
                            <MudTd> <MudIcon Icon="@Icons.Material.Filled.Book"/> </MudTd>
                            <MudTd>@context.Cantidad</MudTd>
                            <MudTd>@oLibros.Find(x => x.Id == context.LibroId).Titulo</MudTd>
                            <MudTd>$@context.Total</MudTd>
                        </RowTemplate>

                    </MudTable>

                    <div class="mt-auto">
                        <MudDivider />
                        <div class="d-flex pa-4">
                            <MudText>Total:</MudText>
                            <MudText Class="ml-auto"><b>$@occ.Monto</b></MudText>
                        </div>
                    </div>
                
                }

            </MudPaper>
        </MudItem>

       

        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="GuardarOC" Class="mt-11 ms-10">Guardar Orden de Compra</MudButton>


    </MudGrid>
</MudContainer>


@code {

    private List<Cliente> clientes = new List<Cliente>();
    private List<Usuario> usuarios = new List<Usuario>();

    private DateTime? oFecha = DateTime.Now;
    private DateTime? oFechaEntrega = DateTime.Now;
    private OrdenCompraCabecera occ = new OrdenCompraCabecera { Estado = "PENDIENTE" , Detalle = new List<OrdenCompraDetalle>() };
    private OrdenCompraDetalle ocd = new OrdenCompraDetalle { Cantidad = 1, Precio = 0 };
    private List<LibroDTO> oLibros = new List<LibroDTO>(); 

    protected override async Task OnInitializedAsync()
    {
        await GetClientes();
        await GetUsuarios();
        await GetLibros();
    }


    public async Task<List<Cliente>> GetClientes()
    {

        var httpResponse = await repositorio.Get<List<Cliente>>("/api/cliente");

        if (!(httpResponse.Error))
        {
            clientes = httpResponse.Response;

            return clientes;
        }

        return clientes;

    }

    public async Task<List<LibroDTO>> GetLibros()
    {

        var httpResponse = await repositorio.Get<List<LibroDTO>>("/api/libro");

        if (!(httpResponse.Error))
        {
            oLibros  = httpResponse.Response;

            return oLibros;
        }

        return oLibros;

    }

    public async Task<List<Usuario>> GetUsuarios()
    {

        var httpResponse = await repositorio.Get<List<Usuario>>("/api/usuario");

        if (!(httpResponse.Error))
        {
            usuarios = httpResponse.Response;

            return usuarios;
        }

        return usuarios;

    }

    public void AgregarLibro()
    {
        ocd.Total = ocd.Cantidad * ocd.Precio;
        occ.Monto = occ.Monto + ocd.Total ;  
        occ.Detalle.Add(ocd);
        ocd = new OrdenCompraDetalle { Cantidad = 1, Precio = 0 };
        StateHasChanged();

    }

    public async Task GuardarOC()
    {

        if ( !(oFecha == null && oFechaEntrega == null))
        {
            occ.FechaEntrega = oFechaEntrega ?? DateTime.Now;
            occ.Fecha = oFecha ?? DateTime.Now;

        }

        var respuesta = await repositorio.Post<OrdenCompraCabecera>("api/ordenCompra", occ);

        if (respuesta.Error)
        {
            snackBar.Add(await respuesta.GetBody(), Severity.Error);
        }
        else
        {
            snackBar.Add("Orden de Compra agregada correctamente", Severity.Success);
            occ = new OrdenCompraCabecera { Estado = "PENDIENTE", Detalle = new List<OrdenCompraDetalle>() };
            StateHasChanged();

        }

    }

}
